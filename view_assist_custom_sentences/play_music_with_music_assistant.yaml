alias: ViewAssist - Play Music with Music Assistant
description: ""
trigger:
  - platform: conversation
    command:
      - play the artist {artist}
      - play some {artist}
    id: playartist
  - platform: conversation
    command:
      - start [the] {playlist} playlist
    id: playlist
  - platform: conversation
    command:
      - play {song} by {artist}
      - listen to {song} by {artist}
    id: playsong
  - platform: conversation
    command:
      - queue {song} by {artist}
      - cue {song} by {artist}
    id: cuesong
  - platform: conversation
    command:
      - listen to {radio} radio
    id: radio
  - platform: conversation
    command: play radio
    id: radio_mode
  - platform: conversation
    command:
      - stop music
    id: stop_media
condition: []
action:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - playartist
        sequence:
          - service: mass.search
            data:
              limit: 1
              media_type:
                - artist
              name: "{{ trigger.slots.artist  }}"
            response_variable: found_artist
          - service: mass.play_media
            target:
              entity_id: "{{ target_mediaplayer_device }}"
            data:
              media_type: artist
              enqueue: replace
              media_id: "{{ found_artist.artists.0.name }}"
          - set_conversation_response: ""
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: music
              title: ""
          - service: browser_mod.navigate
            metadata: {}
            data:
              path: "{{ view_path }}"
            target:
              device_id: "{{ target_display_device }}"
      - conditions:
          - condition: trigger
            id:
              - playlist
        sequence:
          - service: mass.play_media
            target:
              entity_id: "{{ target_mediaplayer_device }}"
            data:
              media_type: playlist
              enqueue: replace
              media_id: "{{ trigger.slots.playlist }}"
          - set_conversation_response: ""
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: music
              title: ""
          - service: browser_mod.navigate
            metadata: {}
            data:
              path: "{{ view_path }}"
            target:
              device_id: "{{ target_display_device }}"
      - conditions:
          - condition: trigger
            id:
              - playsong
        sequence:
          - service: mass.search
            data:
              limit: 1
              media_type:
                - track
              name: "{{ trigger.slots.song  }}"
              artist: "{{ trigger.slots.artist  }}"
            response_variable: found_song
          - service: mass.play_media
            target:
              entity_id: "{{ target_mediaplayer_device }}"
            data:
              media_type: track
              enqueue: play
              media_id: "{{ found_song.tracks.0.name }}"
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: music
              title: ""
          - service: browser_mod.navigate
            metadata: {}
            data:
              path: "{{ view_path }}"
            target:
              device_id: "{{ target_display_device }}"
          - set_conversation_response: ""
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: music
              title: ""
          - service: browser_mod.navigate
            metadata: {}
            data:
              path: "{{ view_path }}"
            target:
              device_id: "{{ target_display_device }}"
      - conditions:
          - condition: trigger
            id:
              - cuesong
        sequence:
          - service: mass.search
            data:
              limit: 1
              media_type:
                - track
              name: "{{ trigger.slots.song  }}"
              artist: "{{ trigger.slots.artist  }}"
            response_variable: found_song
          - service: mass.play_media
            target:
              entity_id: "{{ target_mediaplayer_device }}"
            data:
              media_type: track
              enqueue: next
              media_id: "{{ found_song.tracks.0.name }}"
              artist: "{{ trigger.slots.artist  }}"
          - set_conversation_response: ""
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: music
              title: ""
          - service: browser_mod.navigate
            metadata: {}
            data:
              path: "{{ view_path }}"
            target:
              device_id: "{{ target_display_device }}"
      - conditions:
          - condition: trigger
            id:
              - radio
        sequence:
          - service: mass.search
            data:
              name: "{{ trigger.slots.radio }}"
              media_type:
                - radio
            response_variable: found_radio
          - service: mass.play_media
            target:
              entity_id: "{{ target_mediaplayer_device }}"
            data:
              media_type: radio
              media_id: "{{ found_radio.radio.0.name }}"
          - service: browser_mod.navigate
            metadata: {}
            data:
              path: /dashboard-viewassist/music
            target:
              device_id: "{{ target_display_device }}"
            enabled: false
          - set_conversation_response: ""
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: music
              title: ""
      - conditions:
          - condition: trigger
            id:
              - radio_mode
        sequence:
          - service: mass.play_media
            target:
              entity_id: "{{ target_mediaplayer_device }}"
            data:
              radio_mode: true
              artist: Soundgarden
              media_id: Soundgarden
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: music
              title: ""
      - conditions:
          - condition: trigger
            id:
              - stop_media
        sequence:
          - set_conversation_response: ""
          - service: media_player.media_stop
            data: {}
            target:
              entity_id: "{{ target_mediaplayer_device }}"
          - service: python_script.set_state
            data:
              entity_id: "{{ target_satellite_device }}"
              mode: normal
              title: ""
  - service: input_text.set_value
    metadata: {}
    data:
      value: music
    target:
      entity_id: "{{ target_display_page_view }}"
variables:
  dashboard: /dashboard-viewassist/music
  group_entity: group.viewassist_satellites
  target_satellite_device: |-
    {% for sat in expand(group_entity) %}
      {% if (device_id(sat.attributes.mic_device)  == trigger.device_id) or (device_id(sat.attributes.display_device)  == trigger.device_id) %}
        {{ sat.entity_id }}
      {% endif %}
    {% endfor %}
  target_display_device: "{{ device_id(state_attr(target_satellite_device, 'display_device')) }}"
  target_mediaplayer_device: "{{ state_attr(target_satellite_device, 'mediaplayer_device') + '_2' }}"
  target_satellite_device_type: "{{ state_attr(target_satellite_device, 'type') }}"
  target_display_page_view: "{{ state_attr(target_satellite_device, 'page_view') }}"
